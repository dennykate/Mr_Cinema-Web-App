import { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

// import components
import Header from "./components/Header";
import Items from "./components/Items";
import Footer from "./components/Footer";
import Pages from "./components/Pages";
import Error_404 from "./components/404";

export default function Home() {
  const router = useRouter();
  const { page, genre, actress, search } = router.query;

  const [queryPage, setQueryPage] = useState();
  const [queryValue, setQueryValue] = useState();
  const [queryName, setQueryName] = useState();
  const [error, setError] = useState(false);

  const [movieData, setMovieData] = useState([]);
  const [lastPage, setLastPage] = useState(0);

  useEffect(() => {
    if (page < 0) {
      router.push("/");
    }
  }, [page]);

  useEffect(() => {
    setQueryPage(parseInt(page));

    if (parseInt(page) > lastPage) {
      setError(true);
    } else {
      setError(false);
    }
  }, [page, lastPage]);

  useEffect(() => {
    setQueryValue(genre || actress || search);
    if (genre) {
      setQueryName("genre");
    } else if (actress) {
      setQueryName("actress");
    } else if (search) {
      setQueryName("search");
    }
  }, [genre, actress, search]);

  useEffect(() => {
    if (genre) {
      console.log("genre");
      fetchGenreMoviesFromDatabase(genre, page);
    } else if (actress) {
      console.log("actress");
      fetchActressMoviesFromDatabase(actress, page);
    } else if (search) {
      fetchSearchMoviesFromDatabase(search, page);
    } else {
      console.log("none of these");
      fetchMoviesFromDatabase(page || 1);
    }
  }, [router.query]);

  const fetchGenreMoviesFromDatabase = (genre, page) => {
    const genreName = transformNametoUppercase(genre);

    fetch(
      `http://localhost:8000/movie?filter[category]=${genreName}&${
        page ? "page=" + page : ""
      }`
    )
      .then((res) => res.json())
      .then((data) => {
        setLastPage(Math.floor(data.meta.total / 12 + 1));
        setMovieData(data.data);
      });
  };

  const fetchActressMoviesFromDatabase = (actress, page) => {
    const actressName = transformNametoUppercase(actress);

    fetch(
      `http://localhost:8000/movie?filter[actress]=${actressName}&${
        page ? "page=" + page : ""
      }`
    )
      .then((res) => res.json())
      .then((data) => {
        setLastPage(Math.floor(data.meta.total / 12 + 1));
        setMovieData(data.data);
      });
  };

  const fetchSearchMoviesFromDatabase = (search, page) => {
    fetch(
      `http://localhost:8000/movie/search/name=${search}${
        page ? "?page=" + page : ""
      }`
    )
      .then((res) => res.json())
      .then((data) => {
        console.log(data);
        setLastPage(Math.floor(data.meta.total / 12 + 1));
        setMovieData(data.data);
      });
  };

  const fetchMoviesFromDatabase = (page) => {
    fetch(`http://localhost:8000/movie${page ? "?page=" + page : ""}`)
      .then((res) => res.json())
      .then((data) => {
        setLastPage(Math.floor(data.meta.total / 12 + 1));
        setMovieData(data.data);
      });
  };

  const transformNametoUppercase = (name) => {
    let actressArr = name.split("-");
    let actressName = "";

    for (let i = 0; i < actressArr.length; i++) {
      let capitalizeActressName =
        actressArr[i].split("")[0].toUpperCase() +
        actressArr[i].substring(1, actressArr[i].length);
      actressName += capitalizeActressName + " ";
    }

    return actressName.trim();
  };

  return (
    <div>
      <Head>
        <title>Mr Pussy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="../images/icon.png" />
      </Head>

      <Header />
      <BodyContainer error={error} data={movieData} />
      <PageContaienr
        error={error}
        queryPage={queryPage}
        queryValue={queryValue}
        queryName={queryName}
        lastPage={lastPage}
      />
      <Footer />
    </div>
  );
}

const BodyContainer = ({ error, data }) => (
  <>{error ? <Error_404 /> : data.length > 0 && <Items data={data} />}</>
);

const PageContaienr = ({
  error,
  queryPage,
  lastPage,
  queryName,
  queryValue,
}) => (
  <>
    {!error && (
      <Pages
        page={queryPage ? queryPage : 1}
        last={lastPage}
        path={""}
        queryName={queryName}
        queryValue={queryValue}
      />
    )}
  </>
);
